import json
import os
import random

import requests
import time

random.seed(7)

class DeepLeo:
    def __init__(self) -> None:
        self.temperature = 0.1
        self.max_tokens = 1024
        self.top_p = 0.95
        self.frequency_penalty = 0.2
        self.presence_penalty = 0
        self.stop = ["<|im_end|>"]
        self.url = "https://prom-vesta-a.westus2.inference.ml.azure.com/v1/rainbow"


    def set_params(self, **kwargs) -> None:
        if "temperature" in kwargs:
            self.temperature = kwargs["temperature"]
        if "max_tokens" in kwargs:
            self.max_tokens = kwargs["max_tokens"]
        if "top_p" in kwargs:
            self.top_p = kwargs["top_p"]
        if "frequency_penalty" in kwargs:
            self.frequency_penalty = kwargs["frequency_penalty"]
        if "presence_penalty" in kwargs:
            self.presence_penalty = kwargs["presence_penalty"]
        if "stop" in kwargs:
            self.stop = kwargs["stop"]
        if "url" in kwargs:
            self.url = kwargs["url"]

    def get_completions(self, prompt: str, image_base64: str) -> str:
        data = {
    "temperature": 0.0,
    "max_tokens": 512,
    "top_p": 0.95,
    "stop": [
        "<|im_end|>"
    ],
    "transcript": [
        {
            "type": "text",
            "data": "<|im_start|>system\n[system](#instructions)\n## Instructions\nI am a description generating assistant, a large multi-modal language model capable of understanding images for generating detailed descriptions of images. My task is to generate descriptions that capture the main content and context of a given image. The descriptions should be concise, coherent, and accurate, and should not include any irrelevant or subjective information. The descriptions should also follow proper grammar, spelling, and punctuation rules. Here are some steps and guidelines to help me complete the task:\n    - Look at the image **carefully** and try to identify **all the different elements or objects** that are present in it.\n    - **Understand the user query** and what information the user is looking for in the image.\n    - Write a sentence that gives **a general overview** of what the image shows, such as **the main subject, the setting, the mood, or the theme**. If possible, **address the user query** in your sentence by highlighting **the relevant aspects** of the image.\n    - Write **a bulleted list** of **all specific elements or objects** that are visible in the image, and use **descriptive adjectives or details** to explain them.\n    - If the user query is about **a particular element or object**, provide **more details or comparisons** about it.\n    - Do not include **any irrelevant or subjective information** that is not present in the image.\n    - If the image has **text**, include **the text** in your descriptions.\n    - I can encounter images that have **blurred** faces to protect the privacy of the people present. For such a case, I should\n        * Describe all aspects of the image that are **not blurred** in **detail**\n        * Make sure I **do not** mention any details about the blurred part of the image which can be used to guess the identity, gender, race or emotions of the people present.\n## On my abilities for generating image descriptions\n    - I generate descriptions that capture **all the important and interesting aspects** of the presented image.\n    - I do not add **any information** that is not present in the image.\n    - I do not add **any information** that cannot be **inferred** from the image.\n    - I include **the text** in my descriptions if there is **relevant text** in the image.\n    - My descriptions should be **helpful** and **informative** for answering the query provided by the user.\n<|im_end|>\n<|im_start|>user\n[user](#message)\nCan you describe this image?\n"
        },
        {
            "type": "image",
            "data": ""
        },
        {
            "type": "text",
            "data": "\n<|im_end|>\n<|im_start|>assistant\n[assistant](#inner_monologue)\nAvoiding any reference to the blurred people's identity, gender, race or emotions.\n[assistant](#message)\n- This is a photo realistic image of a tall pilsner glass of beer on a square coaster in a bright bar setting.\n- The label on the glass is a green oval with a white border. It reads \"Herren Pils\".\n- The beer has a white head on it does not quite fill the glass.\n- The beer and coaster are on a polished wooden bar. You can see the bar surface refracted through the beer.\n- The coaster is square, green in color with part of a beer bottle and \"edel. herb.\" written on it.\n- The background consists of seating area with wooden chairs at the bar and a booth in the background.\n- The background consists of diffused lighting.\n<|im_end|>\n<|im_start|>user\n[user](#message)\n{}\n".format(prompt)
        },
        {
            "type": "image",
            "data": image_base64
        },
        {
            "type": "text",
            "data": "\n<|im_end|>\n<|im_start|>assistant\n[assistant](#inner_monologue)\nAvoiding any reference to the blurred people's identity, gender, race or emotions.\n[assistant](#message)"
        }
    ]
}

        data = {
            "temperature": 0.0,
            "max_tokens": 512,
            "top_p": 0.95,
            "stop": [
                "<|im_end|>"
            ],
            "transcript": [
                {
                    "type": "text",
                    "data": prompt,
                },
                {
                    "type": "image",
                    "data": image_base64
                }
            ]
        }

        headers = dict()
        # stream = os.popen(
        #     "az account get-access-token --resource https://ml.azure.com --query accessToken")
        # access_token = stream.read().strip('\n').strip('"')
        access_token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyIsImtpZCI6Ii1LSTNROW5OUjdiUm9meG1lWm9YcWJIWkdldyJ9.eyJhdWQiOiJodHRwczovL21sLmF6dXJlLmNvbSIsImlzcyI6Imh0dHBzOi8vc3RzLndpbmRvd3MubmV0LzcyZjk4OGJmLTg2ZjEtNDFhZi05MWFiLTJkN2NkMDExZGI0Ny8iLCJpYXQiOjE2ODYyMDQ1ODksIm5iZiI6MTY4NjIwNDU4OSwiZXhwIjoxNjg2MjkxMjg5LCJhaW8iOiJFMlpnWURpY29NbHdmdGFQOWxiUENiY0ZObDVmRHdBPSIsImFwcGlkIjoiZjg3NDJkNzEtYTlhZi00MjkxLWE2ZTMtOGYyMjU1NDBhMTAyIiwiYXBwaWRhY3IiOiIxIiwiaWRwIjoiaHR0cHM6Ly9zdHMud2luZG93cy5uZXQvNzJmOTg4YmYtODZmMS00MWFmLTkxYWItMmQ3Y2QwMTFkYjQ3LyIsIm9pZCI6IjE2MmQxY2I1LTdmOGMtNDE5Mi04YTAyLTg2MDE3M2FjNGYxMiIsInJoIjoiMC5BUUVBdjRqNWN2R0dyMEdScXkxODBCSGJSMTl2cGhqZjJ4ZE1uZGNXTkhFcW5MNGFBQUEuIiwic3ViIjoiMTYyZDFjYjUtN2Y4Yy00MTkyLThhMDItODYwMTczYWM0ZjEyIiwidGlkIjoiNzJmOTg4YmYtODZmMS00MWFmLTkxYWItMmQ3Y2QwMTFkYjQ3IiwidXRpIjoiTHo1bUc1WnBSVXV5NGlzb3hzUVpBQSIsInZlciI6IjEuMCJ9.rddCtA5BNt3HqT5p_b48Zh8uTKp8yFaWTodybo6GH5rwflXuGcDEGNwhYEmQLQ4WueEfpn7EBbnJ91XsTumw-ca1lYTPZ0YKT2VTSlU4UmQddx-MmrcBap4ncL8oWp6rKLYZvGZhs_qO3kOJDEPL1Yre58rppJhog3qgQoFx0OcJxJ3vTKaoM7mu3CkfuRWV6_-KYgxQVd-z8zdBmLrkCEW5TEYvzZHJfHHWlJLZE3pmi8-7o4Dm7MrT6RwGXxnZ94dsUgbKVSnYyfQSZGncwgK8U6qU3mjryQ22RHpkf9weMfjZA44oJv2ChygZ134dn38-kR4lfGIvQ-ksDNcJmQ"
        headers["Authorization"] = "Bearer " + access_token
        headers["Content-Type"] = "application/json"

            
        print("prompt:", prompt)
        # print("data:", data)
        json_data = json.dumps(data)
        # print("json_data:", json_data)
        response = requests.post(
            self.url, headers=headers, json=data).json()
        if "error" in response and "Please reduce your prompt" in response["error"]["message"]:
            raise ValueError(response["error"]["message"])
        success = False
        for _ in range(10):
            try:
                result = response["choices"][0]["text"].strip()
                success = True
                break
            except Exception as e:
                print(e)
                print(response)
                print("retrying...")
                time.sleep(10)
        if not success:
            raise ValueError("Failed to get response from DeepLeo")

        return result

import cv2
import base64

# with open(r"C:\Users\reagan\Desktop\Screenshot 2023-06-02 100145.png", "rb") as img_file:
#     my_string = base64.b64encode(img_file.read())
# my_string = my_string.decode('utf-8')
okvqa_path_img = "/home/taoli1/.conda/envs/lavis/lib/python3.8/site-packages/lavis/datasets/data/coco/images/"
test_pictures_path = "val2014"

import json, os, sys
from collections import namedtuple
import time
"""
ok_vqa_test:
model: ofa
evaluation_measure: https://visualqa.org/evaluation
evaluation_demo:https://github.com/GT-Vision-Lab/VQA/blob/master/PythonEvaluationTools/vqaEvalDemo.py
                modified(py2 -> py3) version in  submodule(nlvr/vqa):           
                nlvr/vqa/PythonEvaluationTools/vqaEvalDemo.py
leader_board: https://okvqa.allenai.org/leaderboard.html
"""
# update to actual value before running
# expected directoy structure
# data_sets/ok_vqa/ 
#    train2014/*.jpg
#    val2014/*.jpg
#    mscoco_train2014_annotations.json
#    mscoco_val2014_annotations.json
#    OpenEnded_mscoco_train2014_questions.json
#    OpenEnded_mscoco_val2014_questions.json
okvqa_path = "/home/taoli1/.conda/envs/lavis/lib/python3.8/site-packages/lavis/datasets/data/okvqa/annotations/"

test_question_json_path = "OpenEnded_mscoco_val2014_questions.json"
train_question_json_path = "OpenEnded_mscoco_train2014_questions.json"

test_annotations_json_path = "mscoco_val2014_annotations.json"
train_annotations_json_path = "mscoco_train2014_annotations.json"

test_pictures_path = "val2014"
train_pictures_path = "train2014"
test_picture_file_name_pattern = "COCO_val2014_{pic_name}"
train_picture_file_name_pattern = "COCO_train2014_{pic_name}"
okvqa_path_img = "/home/taoli1/.conda/envs/lavis/lib/python3.8/site-packages/lavis/datasets/data/coco/images/"

def pic_path_pattern(pat_str):
    def p(image_id, image_dir):
        # "COCO_val2014_000000000164.jpg"
        id = ["0"] * len("000000000164")
        image_id = str(image_id)
        l = len(image_id)
        l0 = len(id)
        assert l  < l0, "image id > max"
        for i,c in enumerate(image_id):
            id[l0 - l + i] = str(c)
        image_id = "".join(id) + ".jpg"
        return os.path.join(image_dir, pat_str.format(pic_name = image_id))
    
    return p

# Declaring namedtuple()
ok_meta = namedtuple('OK_VQA_DATA_META', ['quesion', 'annotation', 'pic_path', 'pic_name_pattern_trans_fun','test_set_name'])

"""{"image_id": 297147, "question": "What sport can you use this for?", "question_id": 2971475}"""
""" 
        {
          "answer_id": 1,
          "raw_answer": "racing",
          "answer_confidence": "yes",
          "answer": "race"
        }
"""
class Question(object):
    def __init__(self, json_q, json_a, image_path_transfer, image_dir) -> None:
        self.question_text = json_q["question"]
        self.image_id = json_q["image_id"]
        self.question_id = json_q["question_id"]
        self.image_abs_path = image_path_transfer(self.image_id, image_dir)
        self.answers = [i["raw_answer"] for i in json_a["answers"]]
        assert self.question_id == json_a["question_id"] and self.image_id == json_a["image_id"] , "OK-VQA questions-and-annotations sequence corrupted!"
        


test_path = ok_meta(os.path.join(okvqa_path, test_question_json_path), os.path.join(okvqa_path, test_annotations_json_path), 
             os.path.join(okvqa_path_img, test_pictures_path), pic_path_pattern(test_picture_file_name_pattern), "test2014")

train_path = ok_meta(os.path.join(okvqa_path, train_question_json_path), os.path.join(okvqa_path, train_annotations_json_path), 
             os.path.join(okvqa_path_img, train_pictures_path), pic_path_pattern(train_picture_file_name_pattern),"train2014")

# -
current_dir = os.path.dirname(os.path.abspath(__file__))
bt_sz = 10
"""
results = [result]

result{
"question_id": int,
"answer": str
}
"""
res = []
from tqdm import tqdm
from extract_res_from_txt import get_res_from_dict
deepleo = DeepLeo()
missings = [3629415, 1105875, 5818295]
with open('cur_gptv_res_4.txt', 'w') as f_gptv:
    for d in tqdm([ train_path]):
        with open(d.quesion, 'r') as f, open(d.annotation, 'r') as f2:
            questions_js = json.load(f)
            questions = list(questions_js["questions"])
            question_anns_js = json.load(f2)
            questions_anns = list(question_anns_js["annotations"])
            count_q = 0
            q_ann_pairs = list(zip (questions, questions_anns))
            num = len(q_ann_pairs)
            for i in tqdm(range(0, num, bt_sz)):
                q_ann_js_batch = q_ann_pairs[i: min(i + bt_sz ,num)]
                # print(q_js, a_js)
                input_batch = []
                output_batch = []
                for q_js, a_js in q_ann_js_batch: 
                    q = Question(q_js, a_js, d.pic_name_pattern_trans_fun, d.pic_path)
                    count_q+=1
                    q_and_a = {}
                    q_and_a.update({"question_id":int(q.question_id)})
                    input_batch.append({'image': q.image_abs_path, 'text': q.question_text})
                    output_batch.append(q_and_a)
                    img = cv2.imread(q.image_abs_path)
                    jpg_img = cv2.imencode('.jpg', img)
                    b64_string = base64.b64encode(jpg_img[1]).decode('utf-8')
                                    
                    res_text = (deepleo.get_completions(q.question_text, b64_string))
                    print("question_id:" + str(q.question_id) + ",question:" + q.question_text + ",image_path:" + q.image_abs_path + ",answer:" + res_text + "\n")
                    f_gptv.write("question_id:" + str(q.question_id) + ",question:" + q.question_text + ",image_path:" + q.image_abs_path + ",answer:" + res_text + "\n")
                    f_gptv.flush()
                    
            print("finished questions' num:", count_q)
